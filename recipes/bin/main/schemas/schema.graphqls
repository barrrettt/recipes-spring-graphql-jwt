type Query {
  users(id: ID, name: String, rolename: String): [User]
  roles(id: ID): [Role]

  authors(id: ID, name: String): [Author]
  recipes(id: ID, name: String): [Recipe]
  tags(id: ID, name: String): [Tag]
}

type Mutation{
  signIn(name: String!, password: String!): String
  signUp(name: String!, email: String!, password: String!): User                                                                                      

  createUser(name: String!, email: String!, password: String! ,roles: [String]): User
  updateUser(id: ID!, name: String, email: String, password: String, roles: [String]): User
  deleteUser(id: ID!): User

  createRecipe(autorID: ID!, name: String!, ingredients: String, instruccions: String, tags: [String]): Recipe
  updateRecipe(id: ID!, autorID: ID, name: String, ingredients: String, instruccions: String, tags: [String]): Recipe
  deleteRecipe(id: ID!): Recipe

  createTag(name: String!): Tag
  updateTag(id: ID!, name: String): Tag
  deleteTag(id: ID!): Tag

  clearData: String
  mockData: String
}

type User{
    id: ID
    name: String
    jwt: String
    roles: [Role]
    email: String
    createTime: String
}

type Role{
    id: ID
    name: String
}

type Author{
    id: ID
    name: String
    recipes: [Recipe]
}

type Recipe{
  id: ID
  name: String
  author: Author
  ingredients: String
  instruccions: String
  tags: [Tag]
}

type Tag{
  id: ID
  name: String
  count: Int
  recipes: [Recipe]
}